import * as SecureStore from "expo-secure-store";
import Constants from "expo-constants";

// Obtener la URL base de la API desde las variables de entorno o usar un valor por defecto
const API_URL = process.env.EXPO_PUBLIC_API_URL || "http://192.168.1.159:3000/api";

// Clave para almacenar el token
const TOKEN_KEY = "travelquest_token";

export async function apiFetch(endpoint: string, options: RequestInit = {}) {
  const url = `${API_URL}${endpoint}`;
  console.log("üåê Llamando a:", url);

  // Configurar los headers por defecto con tipo correcto
  const headers: Record<string, string> = {
    "Content-Type": "application/json",
    ...(options.headers as Record<string, string> || {}),
  };

  try {
    // Get token directly from SecureStore for each request
    const token = await SecureStore.getItemAsync(TOKEN_KEY);
    
    // Depuraci√≥n: Verificar si el token existe
    console.log("üîë Token disponible:", token ? "S√≠" : "No");
    console.log("üîë Token value:", token ? token.substring(0, 10) + "..." : "None");
    
    // Si hay un token, a√±adirlo a los headers
    if (token) {
      headers["Authorization"] = `Bearer ${token}`;
    } else {
      console.warn("‚ö†Ô∏è No hay token disponible para la petici√≥n:", endpoint);
    }

    // Realizar la petici√≥n
    const response = await fetch(url, {
      ...options,
      headers,
    });

    // Depuraci√≥n: Verificar el estado de la respuesta
    console.log(`üì• Respuesta de ${endpoint}: ${response.status}`);
    
    // Si la respuesta no es exitosa, mostrar m√°s informaci√≥n
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Error en ${endpoint}: ${response.status} - ${errorText}`);
    }

    return response;
  } catch (error) {
    console.error(`‚ùå Error en fetch a ${endpoint}:`, error);
    throw error;
  }
}

